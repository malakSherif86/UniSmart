CREATE OR REPLACE PROCEDURE CASE.UPDATE_COURSE (
    V_COURSE_ID      NUMBER,
    COURSE_NAME      VARCHAR2 := NULL,
    DESCRIPTION      VARCHAR2 := NULL,
    MAX_GRADE        NUMBER := NULL,
    DEPARTMENT_ID    NUMBER := NULL,
    DURATION         VARCHAR2 := NULL
)
IS
  
    INVALID_DEPT_EX  EXCEPTION;
    PRAGMA EXCEPTION_INIT (INVALID_DEPT_EX, -02291);

  
    V_COURSE_NAME    COURSES.COURSE_NAME%TYPE;
    V_DESCRIPTION    COURSES.DESCRIPTION%TYPE;
    V_MAX_GRADE      COURSES.MAX_GRADE%TYPE;
    V_DEPARTMENT_ID  COURSES.DEPARTMENT_ID%TYPE;
    V_DURATION       COURSES.DURATION%TYPE;
    V_COURSE         COURSES%ROWTYPE;
BEGIN
    SELECT *
    INTO V_COURSE
    FROM COURSES
    WHERE COURSE_ID = V_COURSE_ID;
    IF COURSE_NAME IS NULL
    THEN
        V_COURSE_NAME := V_COURSE.COURSE_NAME;
    ELSE
        V_COURSE_NAME := COURSE_NAME;
    END IF;

    IF DESCRIPTION IS NULL
    THEN
        V_DESCRIPTION := V_COURSE.DESCRIPTION;
    ELSE
        V_DESCRIPTION := DESCRIPTION;
    END IF;

    IF MAX_GRADE IS NULL
    THEN
        V_MAX_GRADE := V_COURSE.MAX_GRADE;
    ELSE
        V_MAX_GRADE := MAX_GRADE;
    END IF;

    IF DEPARTMENT_ID IS NULL
    THEN
        V_DEPARTMENT_ID := V_COURSE.DEPARTMENT_ID;
    ELSE
        V_DEPARTMENT_ID := DEPARTMENT_ID;
    END IF;

    IF DURATION IS NULL
    THEN
        V_DURATION := V_COURSE.DURATION;
    ELSE
        V_DURATION := DURATION;
    END IF;

    -- Update the course's data
    UPDATE COURSES
    SET
        COURSE_NAME = V_COURSE_NAME,
        DESCRIPTION = V_DESCRIPTION,
        MAX_GRADE = V_MAX_GRADE,
        DEPARTMENT_ID = V_DEPARTMENT_ID,
        DURATION = V_DURATION
    WHERE
        COURSE_ID = V_COURSE_ID;

EXCEPTION
    WHEN INVALID_DEPT_EX
    THEN
        DBMS_OUTPUT.put_line('Invalid Department ID!');
END;
/

--Update student procedure 
CREATE OR REPLACE PROCEDURE UPDATE_STUDENT (
    p_student_id IN NUMBER,
    p_student_fname IN VARCHAR2,
    p_student_lname IN VARCHAR2,
    p_email IN VARCHAR2,
    p_department_id IN NUMBER
) IS
BEGIN
 
    UPDATE CASE.STUDENTS
    SET    STUDENT_FNAME = p_student_fname,
           STUDENT_LNAME = p_student_lname,
           EMAIL = p_email,
           DEPARTMENT_ID = p_department_id
    WHERE  STUDENT_ID = p_student_id;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END UPDATE_STUDENT;


--procedure call 
select * from students ;

DECLARE
    v_student_id NUMBER := 1;
    v_student_fname VARCHAR2(50) := 'malak';
    v_student_lname VARCHAR2(50) := 'sherif';
    v_email VARCHAR2(50) := 'malak@gamil';
    v_department_id NUMBER := 1;
BEGIN
    UPDATE_STUDENT(
        p_student_id => v_student_id,
        p_student_fname => v_student_fname,
        p_student_lname => v_student_lname,
        p_email => v_email,
        p_department_id => v_department_id
    );
END;
select * from students ;




--Student GBA function 
CREATE OR REPLACE FUNCTION CASE.caseGBA(
    vStudentId IN NUMBER
) RETURN NUMBER
AS
    vTotalScore NUMBER := 0;
    vTotalMaxGrade NUMBER := 0;
    vGPA NUMBER;
BEGIN
   
    SELECT 
        NVL(SUM(g.student_scored_grade), 0),
        NVL(SUM(c.max_grade), 0)
    INTO vTotalScore, vTotalMaxGrade
    FROM grades g
    JOIN courses c ON g.course_id = c.course_id
    WHERE g.student_id = vStudentId;

  
    vGPA := NVL((vTotalScore / NULLIF(vTotalMaxGrade, 0)) * 4.0, NULL);

    DBMS_OUTPUT.PUT_LINE('GPA calculated successfully.');
    
    RETURN vGPA;
END caseGBA;


--Courses GBA function 
CREATE OR REPLACE FUNCTION CASE.calculate_course_gba(
    v_course_id IN NUMBER
) RETURN NUMBER
AS
    v_avg_score NUMBER := 0;
    v_avg_max_grade NUMBER := 0;
    v_course_gba NUMBER;
BEGIN

    SELECT 
        NVL(AVG(g.student_scored_grade), 0),
        NVL(AVG(c.max_grade), 0)
    INTO v_avg_score, v_avg_max_grade
    FROM grades g
    JOIN courses c ON g.course_id = c.course_id
    WHERE g.course_id = v_course_id;

    
    IF v_avg_max_grade > 0 THEN
        v_course_gba := (v_avg_score / v_avg_max_grade) * 4.0;
    ELSE
        v_course_gba := NULL; 
    END IF;

    DBMS_OUTPUT.PUT_LINE('Course GBA calculated successfully.');

    RETURN v_course_gba;
END calculate_course_gba;


